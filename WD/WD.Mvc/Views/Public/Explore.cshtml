@model List<WD.Mvc.Models.PublicUserTopViewModel>
@{
    ViewData["Title"] = "Explorar Tops Públicos";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="~/css/StyleSheet.css" asp-append-version="true" />

<div class="container mt-4">
    <h2 class="mb-3 text-warning">Tops públicos</h2>

    @if (!Model.Any())
    {
        <div class="alert alert-info">No hay usuarios con Top público.</div>
    }
    else
    {
        foreach (var u in Model)
        {
            <div class="mb-4">
                <div class="d-flex justify-content-between align-items-center">
                    <h4 class="text-white mb-2">Top 3 de @u.Nombre</h4>
                    <a class="btn btn-sm btn-outline-light" asp-controller="Public" asp-action="Top3" asp-route-id="@u.UsuarioId">Ver página</a>
                </div>

                <div class="row row-cols-1 row-cols-md-3 g-3">
                    @foreach (var fav in u.Top)
                    {
                        <div class="col">
                            <div class="card shadow h-100 glass-card" style="border-radius: 15px;">
                                <div class="card-body">
                                    <h5 class="card-title text-success fw-bold">@fav.Favorito.Ciudad, @fav.Favorito.Pais</h5>
                                    @if (!string.IsNullOrWhiteSpace(fav.Favorito.Descripcion))
                                    {
                                        <p class="card-text text-white"><strong>Descripción:</strong> @fav.Favorito.Descripcion</p>
                                    }
                                    <div class="mb-2">
                                        @if (fav.Temperatura != null) { <span class="me-3"><strong>Temp:</strong> @fav.Temperatura @u.UnitSymbol</span> }
                                        @if (fav.Humedad != null)    { <span class="me-3"><strong>Humedad:</strong> @fav.Humedad%</span> }
                                        @if (!string.IsNullOrWhiteSpace(fav.WeatherDescription)) { <span class="me-3"><strong>Clima:</strong> @fav.WeatherDescription</span> }
                                    </div>
                                    <button type="button"
                                            class="btn btn-sm btn-primary ver-clima-btn"
                                            data-ciudad="@fav.Favorito.Ciudad"
                                            data-pais="@fav.Favorito.Pais"
                                            data-units="@u.Units"
                                            data-bs-toggle="modal"
                                            data-bs-target="#weatherDetailsModal">
                                        Ver Clima
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

<!-- Modal Detalles de Clima -->
<div class="modal fade" id="weatherDetailsModal" tabindex="-1" aria-labelledby="weatherDetailsLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="weatherDetailsLabel">Clima</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body text-dark">
                <div class="d-flex align-items-center">
                    <div class="spinner-border me-2" role="status"></div>
                    Cargando...
                </div>
            </div>
            <div class="modal-footer">
                <small class="text-muted me-auto">Datos provistos por OpenWeather</small>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function () {
    const modalEl = document.getElementById('weatherDetailsModal');
    const titleEl = modalEl.querySelector('.modal-title');
    const bodyEl = modalEl.querySelector('.modal-body');

    document.querySelectorAll('.ver-clima-btn').forEach(btn => {
        btn.addEventListener('click', async () => {
            const ciudad = btn.dataset.ciudad;
            const pais = btn.dataset.pais;
            const units = btn.dataset.units;
            const unitSymbol = units === 'imperial' ? '°F' : '°C';
            const windUnit = units === 'imperial' ? 'mph' : 'm/s';

            titleEl.textContent = `Clima en ${ciudad}, ${pais}`;
            bodyEl.innerHTML = '<div class="d-flex align-items-center"><div class="spinner-border me-2" role="status"></div> Cargando...</div>';

            try {
                const q = encodeURIComponent(`${ciudad},${pais}`);
                const apiBase = '@(System.Environment.GetEnvironmentVariable("WEATHER_API_BASEURL") ?? "https://localhost:7215")';
                const res = await fetch(`${apiBase}/api/Weather/search?q=${q}&limit=1&units=${units}`);
                if (!res.ok) throw new Error('Error al consultar el clima');
                const data = await res.json();
                const w = Array.isArray(data) && data.length ? data[0] : null;
                if (!w) {
                    bodyEl.innerHTML = '<div class="alert alert-warning mb-0">No se encontraron datos.</div>';
                    return;
                }

                const items = [];
                const val = (v, suffix = '') => (v ?? 'N/A') + (v != null ? suffix : '');

                items.push(`<li><strong>Descripción:</strong> ${w.description ?? 'N/A'}</li>`);
                items.push(`<li><strong>Temperatura:</strong> ${val(w.temp, ' ' + unitSymbol)}</li>`);
                items.push(`<li><strong>Sensación térmica:</strong> ${val(w.feels_like, ' ' + unitSymbol)}</li>`);
                items.push(`<li><strong>Temp min/max:</strong> ${(w.temp_min ?? 'N/A')} / ${(w.temp_max ?? 'N/A')} ${unitSymbol}</li>`);
                items.push(`<li><strong>Humedad:</strong> ${val(w.humidity, '%')}</li>`);
                items.push(`<li><strong>Presión:</strong> ${val(w.pressure, ' hPa')}</li>`);
                if (w.sea_level != null) items.push(`<li><strong>Nivel del mar:</strong> ${w.sea_level} hPa</li>`);
                if (w.grnd_level != null) items.push(`<li><strong>Nivel del suelo:</strong> ${w.grnd_level} hPa</li>`);
                items.push(`<li><strong>Coordenadas:</strong> ${(w.lat ?? 'N/A')}, ${(w.lon ?? 'N/A')}</li>`);
                if (w.visibility != null) items.push(`<li><strong>Visibilidad:</strong> ${w.visibility} m</li>`);
                if (w.clouds_all != null) items.push(`<li><strong>Nubosidad:</strong> ${w.clouds_all}%</li>`);

                const windParts = [];
                if (w.wind_speed != null) windParts.push(`${w.wind_speed} ${windUnit}`);
                if (w.wind_deg != null) windParts.push(`${w.wind_deg}°`);
                if (w.wind_gust != null) windParts.push(`racha ${w.wind_gust} ${windUnit}`);
                items.push(`<li><strong>Viento:</strong> ${windParts.join(', ') || 'N/A'}</li>`);

                bodyEl.innerHTML = `<ul class="mb-0">${items.join('')}</ul>`;
            } catch (err) {
                bodyEl.innerHTML = `<div class="alert alert-danger mb-0">${err.message}</div>`;
            }
        });
    });
});
</script>
}