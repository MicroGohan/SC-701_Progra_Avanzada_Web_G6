@model List<WD.Models.WDModels.WeatherResult>?

@{
    ViewData["Title"] = "Weather Search";
    var searchQuery = ViewBag.SearchQuery as string ?? "";
    var unitSymbol = (ViewBag.TempUnitSymbol as string) ?? "°C";
    var apiUnits = unitSymbol.Contains("F") ? "imperial" : "metric";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="~/css/StyleSheet.css" asp-append-version="true" />

<div id="topFavoritosContainer">
@if (ViewBag.Top3Favoritos != null)
{
    @await Html.PartialAsync("_TopFavoritos", (List<WD.Mvc.Models.FavoritoClimaViewModel>)ViewBag.Top3Favoritos)
}
</div>

<!--Hero de busqueda-->
<div class="container-fluid hero">
    <div class="container">
        <h1>TempStream</h1>
        <p>Consulta el clima en tu ciudad o cualquier parte del mundo en segundos.</p>

        <form method="post" asp-controller="Home" asp-action="Index" class="search-form d-flex flex-column flex-sm-row gap-2 align-items-center mt-4">
            <input type="text" name="searchQuery" class="form-control" placeholder="Ej. San Jose, Lima, Madrid..." value="@searchQuery" />
            <button type="submit" class="btn btn-primary">Buscar</button>
        </form>

        <img src="~/imagenes/sun-cloud.png" class="cloud-sun" alt="Sun and Cloud" />
    </div>
</div>

@if (TempData["FavoritoMensaje"] != null && TempData["UltimoFavoritoId"] != null)
{
    <div class="modal fade" id="favoritoModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">Éxito</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    @if (TempData["FavoritoMensaje"] != null && TempData["UltimoFavoritoId"] != null)
                    {
                        <div class="alert alert-success" role="alert">
                            @Html.Raw(TempData["FavoritoMensaje"])
                        </div>
                        <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#descripcionModal" data-bs-dismiss="modal">
                            Agregar descripción
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="descripcionModal" tabindex="-1" aria-labelledby="descripcionLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form asp-controller="Favorites" asp-action="UpdateDescripcion" method="post">
                    @Html.AntiForgeryToken()
                    <div class="modal-header">
                        <h5 class="modal-title" id="descripcionLabel">Agregar descripción</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" name="idFavorito" value="@TempData["UltimoFavoritoId"]" />
                        <div class="mb-3">
                            <label for="descripcion" class="form-label">Descripción</label>
                            <textarea name="descripcion" class="form-control" maxlength="250" required></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-success">Guardar</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        window.addEventListener('DOMContentLoaded', function () {
            var modal = new bootstrap.Modal(document.getElementById('favoritoModal'));
            modal.show();
        });
    </script>

    @if (TempData["DescripcionGuardada"] != null)
    {
        <div class="modal fade" id="descripcionGuardadaModal" tabindex="-1" aria-labelledby="descGuardadaLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="descGuardadaLabel">Éxito</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-success" role="alert">
                            @TempData["DescripcionGuardada"]
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <script>
            window.addEventListener('DOMContentLoaded', function () {
                var modal = new bootstrap.Modal(document.getElementById('descripcionGuardadaModal'));
                modal.show();
            });
        </script>
    }
}

@if (TempData["FavoritoMensaje"] != null && TempData["UltimoFavoritoId"] == null)
{
    <div class="modal fade" id="favoritoDuplicadoModal" tabindex="-1" aria-labelledby="modalDuplicadoLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalDuplicadoLabel">Aviso</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning" role="alert">
                        @Html.Raw(TempData["FavoritoMensaje"])
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        window.addEventListener('DOMContentLoaded', function () {
            var modal = new bootstrap.Modal(document.getElementById('favoritoDuplicadoModal'));
            modal.show();
        });
    </script>
}

@if (Model != null && Model.Any())
{
    <div class="container mt-5">
        <h3 class="mb-4 text-center text-primary">Resultados del clima</h3>
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var item in Model)
            {
                <div class="col">
                    <div class="card shadow h-100 glass-card" style="border-radius: 15px;">
                        <div class="card-body">
                            <h5 class="card-title text-success fw-bold">@item.Name, @item.Country</h5>
                            <p class="card-text text-white">
                                <strong>Descripción:</strong>
                                @(string.IsNullOrEmpty(item.WeatherDescription) ? "N/A" : char.ToUpper(item.WeatherDescription[0]) + item.WeatherDescription[1..])
                            </p>
                            <p class="card-text">
                                <strong>Temperatura:</strong> @item.Temperature @unitSymbol
                            </p>
                            <p class="card-text">
                                <strong>Humedad:</strong> @item.Humidity%
                            </p>
                            <form asp-controller="Favorites" asp-action="Add" method="post" class="d-inline add-fav-form">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="ciudad" value="@item.Name" />
                                <input type="hidden" name="pais" value="@item.Country" />
                                <button type="submit" class="btn btn-sm btn-outline-warning">⭐ Añadir a favoritos</button>
                            </form>

                            <button type="button"
                                    class="btn btn-sm btn-primary ver-clima-btn ms-2"
                                    data-ciudad="@item.Name"
                                    data-pais="@item.Country"
                                    data-units="@apiUnits"
                                    data-bs-toggle="modal"
                                    data-bs-target="#weatherDetailsModal">
                                Ver Clima
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

<!-- Modal Detalles de Clima (compartido con los botones de resultados) -->
<div class="modal fade" id="weatherDetailsModal" tabindex="-1" aria-labelledby="weatherDetailsLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="weatherDetailsLabel">Clima</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body text-dark">
                <div class="d-flex align-items-center">
                    <div class="spinner-border me-2" role="status"></div>
                    Cargando...
                </div>
            </div>
            <div class="modal-footer">
                <small class="text-muted me-auto">Datos provistos por OpenWeather</small>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const modalEl = document.getElementById('weatherDetailsModal');
        const titleEl = modalEl.querySelector('.modal-title');
        const bodyEl = modalEl.querySelector('.modal-body');
        const topContainer = document.getElementById('topFavoritosContainer');

        function bindVerClimaHandlers(root = document) {
            root.querySelectorAll('.ver-clima-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const ciudad = btn.dataset.ciudad;
                    const pais = btn.dataset.pais;
                    const units = btn.dataset.units;
                    const unitSymbol = '@unitSymbol';
                    const windUnit = units === 'imperial' ? 'mph' : 'm/s';

                    titleEl.textContent = `Clima en ${ciudad}, ${pais}`;
                    bodyEl.innerHTML = '<div class="d-flex align-items-center"><div class="spinner-border me-2" role="status"></div> Cargando...</div>';

                    try {
                        const q = encodeURIComponent(`${ciudad},${pais}`);
                        const apiBase = '@(System.Environment.GetEnvironmentVariable("WEATHER_API_BASEURL") ?? "https://localhost:7215")';
                        const res = await fetch(`${apiBase}/api/Weather/search?q=${q}&limit=1&units=${units}`);
                        if (!res.ok) throw new Error('Error al consultar el clima');
                        const data = await res.json();
                        const w = Array.isArray(data) && data.length ? data[0] : null;
                        if (!w) {
                            bodyEl.innerHTML = '<div class="alert alert-warning mb-0">No se encontraron datos.</div>';
                            return;
                        }

                        const items = [];
                        const val = (v, suffix = '') => (v ?? 'N/A') + (v != null ? suffix : '');

                        items.push(`<li><strong>Descripción:</strong> ${w.description ?? 'N/A'}</li>`);
                        items.push(`<li><strong>Temperatura:</strong> ${val(w.temp, ' ' + unitSymbol)}</li>`);
                        items.push(`<li><strong>Sensación térmica:</strong> ${val(w.feels_like, ' ' + unitSymbol)}</li>`);
                        items.push(`<li><strong>Temp min/max:</strong> ${(w.temp_min ?? 'N/A')} / ${(w.temp_max ?? 'N/A')} ${unitSymbol}</li>`);
                        items.push(`<li><strong>Humedad:</strong> ${val(w.humidity, '%')}</li>`);
                        items.push(`<li><strong>Presión:</strong> ${val(w.pressure, ' hPa')}</li>`);
                        if (w.sea_level != null) items.push(`<li><strong>Nivel del mar:</strong> ${w.sea_level} hPa</li>`);
                        if (w.grnd_level != null) items.push(`<li><strong>Nivel del suelo:</strong> ${w.grnd_level} hPa</li>`);
                        items.push(`<li><strong>Coordenadas:</strong> ${(w.lat ?? 'N/A')}, ${(w.lon ?? 'N/A')}</li>`);
                        if (w.visibility != null) items.push(`<li><strong>Visibilidad:</strong> ${w.visibility} m</li>`);
                        if (w.clouds_all != null) items.push(`<li><strong>Nubosidad:</strong> ${w.clouds_all}%</li>`);

                        const windParts = [];
                        if (w.wind_speed != null) windParts.push(`${w.wind_speed} ${windUnit}`);
                        if (w.wind_deg != null) windParts.push(`${w.wind_deg}°`);
                        if (w.wind_gust != null) windParts.push(`racha ${w.wind_gust} ${windUnit}`);
                        items.push(`<li><strong>Viento:</strong> ${windParts.join(', ') || 'N/A'}</li>`);

                        bodyEl.innerHTML = `<ul class="mb-0">${items.join('')}</ul>`;
                    } catch (err) {
                        bodyEl.innerHTML = `<div class="alert alert-danger mb-0">${err.message}</div>`;
                    }
                });
            });
        }

        function bindDeleteConfirm(root = document) {
            root.querySelectorAll('.delete-fav-form').forEach(form => {
                form.addEventListener('submit', (e) => {
                    if (!confirm('¿Eliminar favorito?')) {
                        e.preventDefault();
                    }
                });
            });
        }

        function showToast(message, type = 'success') {
            const el = document.createElement('div');
            el.className = `alert alert-${type} position-fixed top-0 start-50 translate-middle-x shadow`;
            el.style.zIndex = '1080';
            el.textContent = message;
            document.body.appendChild(el);
            setTimeout(() => el.remove(), 2500);
        }

        async function refreshTopFavoritos() {
            try {
                const res = await fetch('/Home/TopFavoritosPartial?count=3', {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                });
                if (!res.ok) return;
                const html = await res.text();
                topContainer.innerHTML = html;
                // Re-vincular handlers para el nuevo contenido
                bindVerClimaHandlers(topContainer);
                bindDeleteConfirm(topContainer);
            } catch { /* noop */ }
        }

        // Añadir a favoritos (AJAX)
        document.querySelectorAll('.add-fav-form').forEach(form => {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                const btn = form.querySelector('button[type="submit"]');
                btn.disabled = true;

                try {
                    const fd = new FormData(form);
                    const res = await fetch(form.action, {
                        method: 'POST',
                        body: fd,
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    });

                    const data = res.ok ? await res.json() : { ok: false, message: 'Error al agregar' };
                    showToast(data.message, data.ok ? 'success' : 'warning');

                    if (data.ok) {
                        await refreshTopFavoritos();
                    }
                } catch (err) {
                    showToast('Error de red al agregar', 'danger');
                } finally {
                    btn.disabled = false;
                }
            });
        });

        // Bind inicial
        bindVerClimaHandlers();
        bindDeleteConfirm();
    });
</script>
}